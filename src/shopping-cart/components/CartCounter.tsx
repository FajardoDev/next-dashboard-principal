"use client";

import { useDispatch } from "react-redux";
import { useContador } from "..";
import { useAppSelector } from "../../store/index";
import {
	decrement,
	increment,
	reset,
	valorInicialCount,
} from "@/store/counter/counterSlice";
import { useEffect } from "react";

interface Props {
	valorIncial?: number;
}
// Paste JSON as Code typado elige typeScript y el nombre de la data copia la resp de la data en PostMan
// Generated by https://quicktype.io
export interface CounterResponse {
	method: string;
	count: number;
}

// Api creada
const getApiCounter = async (): Promise<CounterResponse> => {
	const data = await fetch("/api/counter").then((resp) => resp.json());
	console.log("data: ", data);

	return data as CounterResponse;
};

export const CartCounter = ({ valorIncial = 0 }: Props) => {
	const counts = useAppSelector((state) => state.counter.count);
	const dispatch = useDispatch();

	// const counts = useSelector(
	// 	(state: RootState): number => state.counter.count,
	// );

	// console.log("counts: ", counts);
	// const { counter, incrementar, decrementar, reset } =
	// 	useContador(valorIncial);

	// useEffect(() => {
	// 	dispatch(valorInicialCount(valorIncial));
	// }, [dispatch, valorIncial]);

	useEffect(() => {
		getApiCounter().then(({ count }): {} => dispatch(valorInicialCount(count)));
	}, [dispatch]);

	return (
		<>
			<span className="text-5xl font-bold">{counts}</span>
			<div className="flex space-x-2">
				<button
					// onClick={() => decrementar(1)}
					onClick={() => dispatch(decrement())}
					value={counts}
					type="button"
					className={`flex items-center justify-center p-2 rounded-xl bg-gray-900 text-white transition ease-out duration-150 w-[100px] ${
						counts === 0 ? "cursor-not-allowed opacity-50" : "hover:bg-gray-600"
					}`}
					disabled={counts === 0}
				>
					-1
				</button>
				<button
					// onClick={reset}
					onClick={() => dispatch(reset(0))}
					type="button"
					className={`flex items-center justify-center p-2 rounded-xl bg-red-900 text-white  transition ease-out duration-150 w-[100px] ${
						counts === 0 ? "cursor-not-allowed opacity-50" : "hover:bg-gray-600"
					}`}
					disabled={counts === 0}
				>
					Reset
				</button>
				<button
					value={counts}
					// onClick={() => incrementar(1)}
					onClick={() => dispatch(increment())}
					type="button"
					className="flex items-center justify-center p-2 rounded-xl bg-gray-900 text-white hover:bg-gray-600 transition ease-out duration-150 w-[100px]"
				>
					+1
				</button>
			</div>
		</>
	);
};
